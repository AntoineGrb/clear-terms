// ========================================
// API CONFIGURATION - Gestion centralis√©e des URLs backend
// ========================================

// ‚öôÔ∏è CONFIGURATION - Modifiez ces valeurs selon vos besoins
const CONFIG = {
  // URLs backend
  LOCAL_URL: 'http://localhost:3000',
  STAGING_URL: 'https://clear-terms-staging.onrender.com', // √Ä modifier si vous avez un staging
  PROD_URL: 'https://clear-terms.onrender.com',

  // Mode de fonctionnement (une seule des options √† true)
  FORCE_LOCAL: false, 
  FORCE_STAGING: true,
  FORCE_PROD: false,  
  // Si les 3 sont false = auto-d√©tection (dev/prod)

  // Param√®tres polling
  POLL_INTERVAL: 2000,        // 2 secondes
  MAX_POLL_ATTEMPTS: 60       // 2 minutes max
};

// R√©trocompatibilit√©
const POLL_INTERVAL = CONFIG.POLL_INTERVAL;
const MAX_POLL_ATTEMPTS = CONFIG.MAX_POLL_ATTEMPTS;

// Cache de l'URL backend (√©valu√© une seule fois)
let _backendUrlCache = null;

/**
 * D√©tecte automatiquement l'environnement (sauf si forc√©)
 * - En d√©veloppement : utilise localhost
 * - En production : utilise l'URL Render
 *
 * Note: R√©sultat mis en cache apr√®s la premi√®re ex√©cution
 */
function getBackendURL() {
  // Retourner le cache si d√©j√† √©valu√©
  if (_backendUrlCache !== null) {
    return _backendUrlCache;
  }

  // D√©terminer l'URL
  let url;
  let mode;

  if (CONFIG.FORCE_LOCAL) {
    mode = 'LOCAL (forc√©)';
    url = CONFIG.LOCAL_URL;
  } else if (CONFIG.FORCE_STAGING) {
    mode = 'STAGING (forc√©)';
    url = CONFIG.STAGING_URL;
  } else if (CONFIG.FORCE_PROD) {
    mode = 'PRODUCTION (forc√©)';
    url = CONFIG.PROD_URL;
  } else {
    // Auto-d√©tection
    try {
      const manifest = chrome.runtime.getManifest();
      const hasUpdateUrl = 'update_url' in manifest;
      const isDevelopment = !hasUpdateUrl;

      console.log('üîç [CONFIG] D√©tection environnement:', {
        hasUpdateUrl,
        isDevelopment,
        manifestKeys: Object.keys(manifest)
      });

      if (isDevelopment) {
        mode = 'LOCAL (auto-d√©tect√©)';
        url = CONFIG.LOCAL_URL;
      } else {
        mode = 'PRODUCTION (auto-d√©tect√©)';
        url = CONFIG.PROD_URL;
      }
    } catch (error) {
      console.log('‚ö†Ô∏è [CONFIG] Erreur d√©tection, fallback LOCAL:', error.message);
      mode = 'LOCAL (fallback)';
      url = CONFIG.LOCAL_URL;
    }
  }

  // Mettre en cache et logger une seule fois
  _backendUrlCache = url;
  console.log(`‚úÖ [CONFIG] Backend s√©lectionn√©: ${url} [${mode}]`);

  return _backendUrlCache;
}
